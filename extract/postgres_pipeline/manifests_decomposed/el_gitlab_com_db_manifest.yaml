connection_info:
  database: GITLAB_COM_DB_NAME
  host: GITLAB_COM_DB_HOST
  pass: GITLAB_COM_DB_PASS
  port: GITLAB_COM_PG_PORT
  user: GITLAB_COM_DB_USER
tables:
  alert_management_alerts:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'alert_management_alerts'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , started_at
      , ended_at
      , events
      , iid
      , severity
      , status
      , issue_id
      , project_id
      , title
      , description
      , service
      , monitoring_tool
      , hosts
      , payload
      FROM alert_management_alerts
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  alert_management_http_integrations:
    export_schema: "gitlab_com"
    export_table: alert_management_http_integrations
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , project_id
      , active
      , endpoint_identifier
      , name
      , payload_example
      , payload_attribute_mapping
      FROM alert_management_http_integrations
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  analytics_cycle_analytics_group_stages:
    export_schema: "gitlab_com"
    export_table: analytics_cycle_analytics_group_stages
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , relative_position
      , start_event_identifier
      , end_event_identifier
      , group_id
      , start_event_label_id
      , end_event_label_id
      , hidden
      , custom
      , name
      , group_value_stream_id
      FROM analytics_cycle_analytics_group_stages
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  application_settings:
    advanced_metadata: true
    dbt_snapshots: true
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'application_settings'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , default_projects_limit
      , signup_enabled
      , created_at
      , updated_at
      , shared_runners_enabled
      , shared_runners_text
      , usage_ping_enabled
      , shared_runners_minutes
      , repository_size_limit
      FROM application_settings
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  approval_merge_request_rules:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'approval_merge_request_rules'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , merge_request_id
      , approvals_required
      , name
      , rule_type
      , report_type
      , section
      , modified_from_project_rule
      FROM approval_merge_request_rules
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  approval_project_rules:
    export_schema: "gitlab_com"
    export_table: approval_project_rules
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , project_id
      , approvals_required
      , name
      , rule_type
      FROM approval_project_rules
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  approvals:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'approvals'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , merge_request_id
      , user_id
      , created_at
      , updated_at
      FROM approvals
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  audit_events:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'audit_events'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , author_id
      , entity_id
      , entity_type
      , details
      , created_at
      FROM audit_events
      WHERE created_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  audit_events_external_audit_event_destinations:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'audit_events_external_audit_event_destinations'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , namespace_id
      , destination_url
      , created_at
      , updated_at
      FROM audit_events_external_audit_event_destinations
      WHERE created_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  authentication_events:
    export_schema: "gitlab_com"
    export_table: authentication_events
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , user_id
      , result
      , ip_address
      , provider
      , user_name
      FROM authentication_events
      WHERE created_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  banned_users:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'banned_users'
    export_table_primary_key: user_id
    import_db: GITLAB_DB
    import_query: |-
      SELECT user_id
      , created_at
      , updated_at
      FROM banned_users
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  boards:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'boards'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , created_at
      , updated_at
      , milestone_id
      , group_id
      , weight
      FROM boards
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  boards_epic_boards:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'boards_epic_boards'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , hide_backlog_list
      , hide_closed_list
      , group_id
      , created_at
      , updated_at
      , name
      FROM boards_epic_boards
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  bulk_imports:
    export_schema: "gitlab_com"
    export_table: bulk_imports
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , source_type
      , status
      , created_at
      , updated_at
      FROM bulk_imports
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  cluster_agent_tokens:
    export_schema: "gitlab_com"
    export_table: cluster_agent_tokens
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , agent_id
      FROM cluster_agent_tokens
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  cluster_agents:
    export_schema: "gitlab_com"
    export_table: cluster_agents
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , project_id
      , name
      FROM cluster_agents
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  cluster_projects:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'cluster_projects'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , cluster_id
      , project_id
      , created_at
      , updated_at
      FROM cluster_projects
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  clusters:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'clusters'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , provider_type
      , platform_type
      , created_at
      , updated_at
      , enabled
      , name
      , environment_scope
      , cluster_type
      , domain
      , managed
      , namespace_per_environment
      , management_project_id
      , cleanup_status
      , cleanup_status_reason
      , helm_major_version
      FROM clusters
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  container_expiration_policies:
    export_schema: "gitlab_com"
    export_table: container_expiration_policies
    export_table_primary_key: project_id
    import_db: GITLAB_DB
    import_query: |-
      SELECT created_at
      , updated_at
      , next_run_at
      , project_id
      , name_regex
      , cadence
      , older_than
      , keep_n
      , enabled
      , name_regex_keep
      FROM container_expiration_policies
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  container_repositories:
    export_schema: "gitlab_com"
    export_table: container_repositories
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , name
      , created_at
      , updated_at
      , status
      , expiration_policy_started_at
      , expiration_policy_cleanup_status
      , expiration_policy_completed_at
      , migration_pre_import_started_at
      , migration_pre_import_done_at
      , migration_import_started_at
      , migration_import_done_at
      , migration_aborted_at
      , migration_skipped_at
      , migration_retries_count
      , migration_skipped_reason
      , migration_state
      , migration_aborted_in_state
      , migration_plan
      , last_cleanup_deleted_tags_count
      FROM container_repositories
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  compliance_management_frameworks:
    export_schema: 'gitlab_com'
    export_table: 'compliance_management_frameworks'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , name
      , description
      , color
      , namespace_id
      , pipeline_configuration_full_path
      , created_at
      , updated_at
      FROM compliance_management_frameworks
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  csv_issue_imports:
    export_schema: "gitlab_com"
    export_table: csv_issue_imports
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , user_id
      , created_at
      , updated_at
      FROM csv_issue_imports
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  dast_profiles:
    export_schema: "gitlab_com"
    export_table: dast_profiles
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , dast_site_profile_id
      , dast_scanner_profile_id
      , created_at
      , updated_at
      , name
      , description
      , branch_name
      FROM dast_profiles
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  dependency_proxy_group_settings:
    export_schema: "gitlab_com"
    export_table: dependency_proxy_group_settings
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , group_id
      , created_at
      , updated_at
      , enabled
      FROM dependency_proxy_group_settings
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp 
  dependency_proxy_image_ttl_group_policies:
    export_schema: "gitlab_com"
    export_table: dependency_proxy_image_ttl_group_policies
    export_table_primary_key: group_id
    import_db: GITLAB_DB
    import_query: |-
      SELECT created_at
      , updated_at
      , group_id
      , ttl
      , enabled
      FROM dependency_proxy_image_ttl_group_policies
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp 
  deployment_approvals:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'deployment_approvals'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , deployment_id
      , user_id
      , created_at
      , updated_at
      , status
      , comment
      , approval_rule_id
      FROM deployment_approvals
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  deployments:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'deployments'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , iid
      , project_id
      , environment_id
      , ref
      , tag
      , sha
      , user_id
      , deployable_id
      , deployable_type
      , created_at
      , updated_at
      , on_stop
      , status
      , finished_at
      , cluster_id
      FROM deployments
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  emails:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'emails'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , email
      , created_at
      , updated_at
      , confirmed_at
      , confirmation_sent_at
      FROM emails
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  environments:
    advanced_metadata: true
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'environments'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , name
      , created_at
      , updated_at
      , external_url
      , environment_type
      , state
      , slug
      FROM environments
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  epics:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'epics'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , iid
      , group_id
      , author_id
      , assignee_id
      , updated_by_id
      , last_edited_by_id
      , lock_version
      , start_date
      , end_date
      , last_edited_at
      , created_at
      , updated_at
      , title
      , description
      , state_id
      , closed_at
      , parent_id
      , relative_position
      , start_date_sourcing_epic_id
      , external_key
      , confidential
      FROM epics
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  events:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'events'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , author_id
      , target_id
      , created_at
      , updated_at
      , action
      , target_type
      FROM events
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  experiment_subjects:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'experiment_subjects'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , experiment_id
      , user_id
      , namespace_id AS group_id
      , project_id
      , variant
      , created_at
      , updated_at
      , converted_at
      , context
      FROM experiment_subjects
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  external_status_checks:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'external_status_checks'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , created_at
      , updated_at
      , external_url
      , name
      FROM external_status_checks
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  grafana_integrations:
    export_schema: "gitlab_com"
    export_table: grafana_integrations
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , created_at
      , updated_at
      , grafana_url
      , enabled
      FROM grafana_integrations
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  identities:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'identities'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , extern_uid
      , provider
      , user_id
      , created_at
      , updated_at
      , secondary_extern_uid
      , saml_provider_id
      FROM identities
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  in_product_marketing_emails:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'in_product_marketing_emails'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , cta_clicked_at
      , track
      , series
      , created_at
      , updated_at
      FROM in_product_marketing_emails
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  integrations:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'integrations'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , NULL as type
      , project_id
      , created_at
      , updated_at
      , active
      , NULL AS template
      , push_events
      , issues_events
      , merge_requests_events
      , tag_push_events
      , note_events
      , category
      , wiki_page_events
      , pipeline_events
      , confidential_issues_events
      , commit_events
      , job_events
      , confidential_note_events
      , deployment_events
      , comment_on_event_enabled
      , group_id
      , inherit_from_id
      , instance
      , type_new
      FROM integrations
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  issue_metrics:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'issue_metrics'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , issue_id
      , first_mentioned_in_commit_at
      , first_associated_with_milestone_at
      , first_added_to_board_at
      , created_at
      , updated_at
      FROM issue_metrics
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  issues:
    additional_filtering: AND created_at NOT IN ( '0001-01-01 00:00:00+00', '1000-01-01 00:00:00+00', '10000-01-01 00:00:00+00','4714-11-24 00:00:00+00 BC')
    dbt_snapshots: true
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'issues'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , iid
      , title
      , author_id
      , project_id
      , created_at
      , updated_at
      , confidential
      , description
      , issue_type
      , milestone_id
      , updated_by_id
      , weight
      , CASE WHEN due_date < '1970-01-01' THEN NULL ELSE due_date END AS due_date
      , moved_to_id
      , lock_version
      , time_estimate
      , last_edited_at
      , last_edited_by_id
      , discussion_locked
      , closed_at
      , closed_by_id
      , relative_position
      , service_desk_reply_to
      , state_id
      , duplicated_to_id
      , promoted_to_epic_id
      , sprint_id
      , health_status
      FROM issues
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  jira_imports:
    export_schema: "gitlab_com"
    export_table: jira_imports
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , user_id
      , label_id
      , created_at
      , updated_at
      , finished_at
      , jira_project_xid
      , total_issue_count
      , imported_issues_count
      , failed_to_import_count
      , status
      , jid
      , jira_project_key
      , jira_project_name
      , scheduled_at
      , error_message
      FROM jira_imports
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  jira_tracker_data:
    export_schema: "gitlab_com"
    export_table: jira_tracker_data
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , service_id
      , created_at
      , updated_at
      , jira_issue_transition_id
      , project_key
      , issues_enabled
      , deployment_type
      , vulnerabilities_issuetype
      , vulnerabilities_enabled
      FROM jira_tracker_data
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  label_priorities:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'label_priorities'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , label_id
      , priority
      , created_at
      , updated_at
      FROM label_priorities
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  labels:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'labels'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , title
      , color
      , project_id
      , created_at
      , updated_at
      , template
      , description
      , type
      , group_id
      FROM labels
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  ldap_group_links:
    export_schema: "gitlab_com"
    export_table: ldap_group_links
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , cn
      , group_access
      , group_id
      , created_at
      , updated_at
      , provider
      , filter
      FROM ldap_group_links
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  lfs_objects:
    export_schema: "gitlab_com"
    export_table: lfs_objects
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , oid
      , size
      , created_at
      , updated_at
      , file
      , file_store
      FROM lfs_objects
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  lfs_objects_projects:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'lfs_objects_projects'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , lfs_object_id
      , project_id
      , created_at
      , updated_at
      , repository_type
      FROM lfs_objects_projects
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  lists:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'lists'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , board_id
      , label_id
      , list_type
      , position
      , created_at
      , updated_at
      , user_id
      , milestone_id
      , max_issue_count
      , max_issue_weight
      , limit_metric
      FROM lists
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  merge_request_blocks:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'merge_request_blocks'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , blocking_merge_request_id
      , blocked_merge_request_id
      , created_at
      , updated_at
      FROM merge_request_blocks
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  merge_request_diffs:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'merge_request_diffs'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , state
      , merge_request_id
      , created_at
      , updated_at
      , base_commit_sha
      , real_size
      , head_commit_sha
      , start_commit_sha
      , commits_count
      FROM merge_request_diffs
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  merge_request_metrics:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'merge_request_metrics'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , merge_request_id
      , latest_build_started_at
      , latest_build_finished_at
      , first_deployed_to_production_at
      , merged_at
      , created_at
      , updated_at
      , pipeline_id
      , merged_by_id
      , latest_closed_by_id
      , latest_closed_at
      , first_comment_at
      , first_commit_at
      , last_commit_at
      , diff_size
      , modified_paths_size
      , commits_count
      , first_approved_at
      , first_reassigned_at
      , added_lines
      , removed_lines
      FROM merge_request_metrics
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
        AND first_comment_at >= '2000-01-01 00:00:00.000'::timestamp
  merge_requests:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'merge_requests'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , iid
      , target_branch
      , source_branch
      , source_project_id
      , author_id
      , assignee_id
      , title
      , created_at
      , updated_at
      , milestone_id
      , state_id
      , merge_status
      , target_project_id
      , updated_by_id
      , merge_error
      , NULL as merge_params
      , merge_when_pipeline_succeeds
      , merge_user_id
      , approvals_before_merge
      , lock_version
      , time_estimate
      , squash
      , last_edited_at
      , last_edited_by_id
      , head_pipeline_id
      , discussion_locked
      , latest_merge_request_diff_id
      , allow_maintainer_to_push
      , description
      FROM merge_requests
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  merge_requests_closing_issues:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'merge_requests_closing_issues'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , merge_request_id
      , issue_id
      , created_at
      , updated_at
      FROM merge_requests_closing_issues
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  milestones:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'milestones'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , iid
      , title
      , description
      , project_id
      , due_date
      , created_at
      , updated_at
      , state
      , start_date
      , group_id
      FROM milestones
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  namespace_root_storage_statistics:
    dbt_snapshots: true
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'namespace_root_storage_statistics'
    export_table_primary_key: namespace_id
    import_db: GITLAB_DB
    import_query: |-
      SELECT namespace_id
      , repository_size
      , lfs_objects_size
      , wiki_size
      , build_artifacts_size
      , storage_size
      , packages_size
      , container_registry_size
      , updated_at
      FROM namespace_root_storage_statistics
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  namespaces:
    dbt_snapshots: true
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'namespaces'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , name
      , path
      , owner_id
      , created_at
      , updated_at
      , type
      , avatar
      , membership_lock
      , share_with_group_lock
      , visibility_level
      , request_access_enabled
      , ldap_sync_status
      , ldap_sync_error
      , ldap_sync_last_update_at
      , ldap_sync_last_successful_update_at
      , ldap_sync_last_sync_at
      , lfs_enabled
      , parent_id
      , shared_runners_minutes_limit
      , extra_shared_runners_minutes_limit
      , repository_size_limit
      , require_two_factor_authentication
      , two_factor_grace_period
      , project_creation_level
      , auto_devops_enabled
      , push_rule_id
      , shared_runners_enabled
      , custom_project_templates_group_id
      FROM namespaces
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  namespace_settings:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'namespace_settings'
    export_table_primary_key: namespace_id
    import_db: GITLAB_DB
    import_query: |-
      SELECT created_at
      , updated_at
      , namespace_id
      , prevent_forking_outside_group
      , allow_mfa_for_subgroups
      , default_branch_name
      , repository_read_only
      , delayed_project_removal
      , resource_access_token_creation_allowed
      , lock_delayed_project_removal
      , prevent_sharing_groups_outside_hierarchy
      , new_user_signups_cap
      , setup_for_company
      , jobs_to_be_done
      FROM namespace_settings
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  notes:
    additional_filtering: AND created_at NOT IN ( '2746-07-23 18:16:42.925+00 BC')
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'notes'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , note
      , noteable_type
      , author_id
      , created_at
      , updated_at
      , project_id
      , attachment
      , line_code
      , commit_id
      , noteable_id
      , system
      , st_diff
      , updated_by_id
      , type
      , position
      , original_position
      , resolved_at
      , resolved_by_id
      , discussion_id
      , note_html
      , cached_markdown_version
      , change_position
      , resolved_by_push
      FROM notes
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  notification_settings:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'notification_settings'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , source_id
      , source_type
      , level
      , created_at
      , updated_at
      , new_note
      , new_issue
      , reopen_issue
      , close_issue
      , reassign_issue
      , new_merge_request
      , reopen_merge_request
      , close_merge_request
      , reassign_merge_request
      , merge_merge_request
      , failed_pipeline
      , success_pipeline
      FROM notification_settings
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  onboarding_progresses:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'onboarding_progresses'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , namespace_id
      , created_at
      , updated_at
      , git_pull_at
      , git_write_at
      , merge_request_created_at
      , pipeline_created_at
      , user_added_at
      , trial_started_at
      , subscription_created_at
      , required_mr_approvals_enabled_at
      , code_owners_enabled_at
      , scoped_label_created_at
      , security_scan_enabled_at
      , issue_auto_closed_at
      , repository_imported_at
      , repository_mirrored_at
      FROM onboarding_progresses
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  operations_feature_flags:
    export_schema: "gitlab_com"
    export_table: operations_feature_flags
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , active
      , created_at
      , updated_at
      , name
      , description
      , iid
      , version
      FROM operations_feature_flags
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  packages_package_files:
    export_schema: 'gitlab_com'
    export_table: 'packages_package_files'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , package_id
      , created_at
      , updated_at
      , size
      , file_store
      , file_name
      , file
      FROM packages_package_files
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  packages_packages:
    export_schema: 'gitlab_com'
    export_table: 'packages_packages'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , created_at
      , updated_at
      , name
      , version
      , package_type
      , creator_id
      FROM packages_packages
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  project_auto_devops:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'project_auto_devops'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , created_at
      , updated_at
      , enabled
      FROM project_auto_devops
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  project_daily_statistics:
    export_schema: 'gitlab_com'
    export_table: 'project_daily_statistics'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , fetch_count
      , date
      FROM project_daily_statistics
      WHERE date >= '{EXECUTION_DATE}'::date - interval '{HOURS} hours'
        AND date <= '{EXECUTION_DATE}'::date
  project_features:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'project_features'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , merge_requests_access_level
      , issues_access_level
      , wiki_access_level
      , snippets_access_level
      , builds_access_level
      , created_at
      , updated_at
      , repository_access_level
      FROM project_features
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  project_settings:
    export_schema: "gitlab_com"
    export_table: project_settings
    export_table_primary_key: project_id
    import_db: GITLAB_DB
    import_query: |-
      SELECT project_id
      , created_at
      , updated_at
      , push_rule_id
      , show_default_award_emojis
      , allow_merge_on_skipped_pipeline
      , squash_option
      , has_confluence
      , has_vulnerabilities
      , prevent_merge_without_jira_issue
      , cve_id_request_enabled
      , mr_default_target_self
      , previous_default_branch
      , warn_about_potentially_unwanted_characters
      , merge_commit_template 
      , has_shimo
      , squash_commit_template
      , legacy_open_source_license_available
      , target_platforms
      , enforce_auth_checks_on_uploads 
      FROM project_settings
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  projects:
    dbt_snapshots: true
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'projects'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , name
      , path
      , description
      , created_at
      , updated_at
      , creator_id
      , namespace_id
      , last_activity_at
      , import_url
      , visibility_level
      , archived
      , avatar
      , merge_requests_template
      , star_count
      , merge_requests_rebase_enabled
      , import_type
      , import_source
      , approvals_before_merge
      , reset_approvals_on_push
      , merge_requests_ff_only_enabled
      , issues_template
      , mirror
      , mirror_user_id
      , shared_runners_enabled
      , build_coverage_regex
      , build_allow_git_fetch
      , build_timeout
      , mirror_trigger_builds
      , pending_delete
      , public_builds
      , last_repository_check_failed
      , last_repository_check_at
      , only_allow_merge_if_pipeline_succeeds
      , has_external_issue_tracker
      , repository_storage
      , repository_read_only
      , request_access_enabled
      , has_external_wiki
      , ci_config_path
      , lfs_enabled
      , only_allow_merge_if_all_discussions_are_resolved
      , repository_size_limit
      , printing_merge_request_link_enabled
      , auto_cancel_pending_pipelines
      , service_desk_enabled
      , delete_error
      , last_repository_updated_at
      , disable_overriding_approvers_per_merge_request
      , storage_version
      , resolve_outdated_diff_discussions
      , remote_mirror_available_overridden
      , only_mirror_protected_branches
      , pull_mirror_available_overridden
      , mirror_overwrites_diverged_branches
      , external_authorization_classification_label
      , NULL AS container_registry_enabled
      FROM projects
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  prometheus_alerts:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'prometheus_alerts'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , environment_id
      , project_id
      FROM prometheus_alerts
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  protected_branches:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'protected_branches'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , name
      , created_at
      , updated_at
      , code_owner_approval_required
      FROM protected_branches
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  protected_environment_approval_rules:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'protected_environment_approval_rules'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , protected_environment_id
      , user_id
      , group_id
      , created_at
      , updated_at
      , access_level
      , required_approvals
      , group_inheritance_type
      FROM protected_environment_approval_rules
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  protected_environments:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'protected_environments'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , created_at
      , updated_at
      , name
      , group_id
      , required_approval_count
      FROM protected_environments
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  push_rules:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'push_rules'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , force_push_regex
      , delete_branch_regex
      , commit_message_regex
      , deny_delete_tag
      , project_id
      , created_at
      , updated_at
      , author_email_regex
      , member_check
      , file_name_regex
      , is_sample
      , max_file_size
      , prevent_secrets
      , branch_name_regex
      , reject_unsigned_commits
      , commit_committer_check
      , regexp_uses_re2
      , commit_message_negative_regex
      FROM push_rules
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  releases:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'releases'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , tag
      , description
      , project_id
      , created_at
      , updated_at
      , author_id
      , sha
      FROM releases
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  remote_mirrors:
    export_schema: "gitlab_com"
    export_table: remote_mirrors
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , url
      , enabled
      , update_status
      , last_update_at
      , last_successful_update_at
      , last_error
      , created_at
      , updated_at
      , last_update_started_at
      , only_protected_branches
      , remote_name
      , error_notification_sent
      , keep_divergent_refs
      FROM remote_mirrors
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  resource_iteration_events:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'resource_iteration_events'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , issue_id
      , merge_request_id
      , iteration_id
      , created_at
      , action
      FROM resource_iteration_events
      WHERE created_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  resource_label_events:
    advanced_metadata: true
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'resource_label_events'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , action
      , issue_id
      , merge_request_id
      , epic_id
      , label_id
      , user_id
      , created_at
      , cached_markdown_version
      , reference
      , reference_html
      FROM resource_label_events
      WHERE created_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  resource_milestone_events:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'resource_milestone_events'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , issue_id
      , merge_request_id
      , milestone_id
      , action
      , state
      , created_at
      FROM resource_milestone_events
      WHERE created_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
#  resource_state_events:
#    export_schema: 'gitlab_com'
#    export_table: 'resource_state_events'
#    export_table_primary_key: id
#    import_db: GITLAB_DB
#    import_query: >
#      SELECT id
#      , user_id
#      , issue_id
#      , merge_request_id
#      , state
#      , created_at
#      FROM resource_state_events
#      WHERE created_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
#        AND '{EXECUTION_DATE}'::timestamp
  resource_weight_events:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'resource_weight_events'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , issue_id
      , weight
      , created_at
      FROM resource_weight_events
      WHERE created_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  routes:
    export_schema: 'gitlab_com'
    export_table: 'routes'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , source_id
      , source_type
      , path
      , created_at
      , updated_at
      FROM routes
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  saml_group_links:
    export_schema: 'gitlab_com'
    export_table: 'saml_group_links'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , access_level
      , group_id
      , created_at
      , updated_at
      , saml_group_name
      FROM saml_group_links
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  security_scans:
    export_schema: "gitlab_com"
    export_table: security_scans
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , build_id
      , scan_type
      , project_id
      , pipeline_id
      , latest
      , status
      FROM security_scans
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  services:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'services'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , NULL AS type
      , project_id
      , created_at
      , updated_at
      , active
      , NULL AS properties
      , NULL AS template
      , push_events
      , issues_events
      , merge_requests_events
      , tag_push_events
      , note_events
      , category
      , wiki_page_events
      , pipeline_events
      , confidential_issues_events
      , commit_events
      , job_events
      , confidential_note_events
      , deployment_events
      , comment_on_event_enabled
      , group_id
      , inherit_from_id
      , instance
      FROM integrations
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  slack_integrations:
    export_schema: 'gitlab_com'
    export_table: 'slack_integrations'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , service_id
      , team_id
      , team_name
      , alias
      , user_id
      , created_at
      , updated_at
      , bot_user_id
      FROM slack_integrations
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  snippets:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'snippets'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , title
      , content
      , author_id
      , project_id
      , created_at
      , updated_at
      , file_name
      , type
      , visibility_level
      FROM snippets
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  sprints:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'sprints'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , start_date
      , due_date
      , project_id
      , group_id
      , iid
      , cached_markdown_version
      , title
      , title_html
      , description
      , description_html
      , state_enum
      FROM sprints
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  status_page_published_incidents:
    export_schema: "gitlab_com"
    export_table: status_page_published_incidents
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , issue_id
      FROM status_page_published_incidents
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  subscriptions:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'subscriptions'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , subscribable_id
      , subscribable_type
      , subscribed
      , created_at
      , updated_at
      , project_id
      FROM subscriptions
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  system_note_metadata:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'system_note_metadata'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , note_id
      , commit_count
      , action
      , created_at
      , updated_at
      , description_version_id
      FROM system_note_metadata
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  terraform_states:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'terraform_states'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , created_at
      , updated_at
      , file_store
      FROM terraform_states
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  todos:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'todos'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , user_id
      , project_id
      , target_id
      , target_type
      , author_id
      , action
      , state
      , created_at
      , updated_at
      , note_id
      , commit_id
      , group_id
      FROM todos
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  uploads:
    export_schema: "gitlab_com"
    export_table: uploads
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , size
      , path
      , checksum
      , model_id
      , model_type
      , uploader
      , created_at
      , store
      , mount_point
      , secret
      FROM uploads
      WHERE created_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  user_custom_attributes:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'user_custom_attributes'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , user_id
      , key
      , value
      FROM user_custom_attributes
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  user_preferences:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'user_preferences'
    export_table_primary_key: user_id
    import_db: GITLAB_DB
    import_query: |-
      SELECT user_id
      , issue_notes_filter
      , merge_request_notes_filter
      , created_at
      , updated_at
      , epics_sort
      , roadmap_epics_state
      , epic_notes_filter
      , issues_sort
      , merge_requests_sort
      , roadmaps_sort
      , first_day_of_week
      , timezone
      , time_display_relative
      , time_format_in_24h
      , projects_sort
      , show_whitespace_in_diffs
      , sourcegraph_enabled
      , setup_for_company
      , render_whitespace_in_code
      , tab_width
      , experience_level
      , view_diffs_file_by_file
      , id
      , gitpod_enabled
      FROM user_preferences
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  users:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: 'users'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , email
      , commit_email
      , remember_created_at
      , sign_in_count
      , current_sign_in_at
      , last_sign_in_at
      , current_sign_in_ip
      , last_sign_in_ip
      , created_at
      , updated_at
      , name
      , admin
      , projects_limit
      , failed_attempts
      , locked_at
      , can_create_group
      , can_create_team
      , state
      , color_scheme_id
      , password_expires_at
      , created_by_id
      , last_credential_check_at
      , avatar
      , confirmed_at
      , confirmation_sent_at
      , unconfirmed_email
      , hide_no_ssh_key
      , website_url
      , admin_email_unsubscribed_at
      , notification_email
      , hide_no_password
      , password_automatically_set
      , location
      , public_email
      , dashboard
      , project_view
      , consumed_timestep
      , layout
      , hide_project_limit
      , note
      , otp_grace_period_started_at
      , external
      , organization
      , auditor
      , require_two_factor_authentication_from_group
      , two_factor_grace_period
      , last_activity_on
      , notified_of_own_activity
      , preferred_language
      , email_opted_in
      , email_opted_in_source_id
      , email_opted_in_at
      , theme_id
      , accepted_term_id
      , private_profile
      , roadmap_layout
      , include_private_contributions
      , group_view
      , managing_group_id
      , "role"
      , username
      , first_name
      , last_name
      , user_type
      FROM users
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  users_ops_dashboard_projects:
    export_schema: "gitlab_com"
    export_table: users_ops_dashboard_projects
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , user_id
      , project_id
      FROM users_ops_dashboard_projects
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  vulnerabilities:
    export_schema: 'gitlab_com'
    export_table: 'vulnerabilities'
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , confidence
      , confidence_overridden
      , confirmed_at
      , created_at
      , dismissed_at
      , resolved_at
      , severity_overridden
      , state
      , updated_at
      FROM vulnerabilities
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  vulnerability_occurrences:
    export_schema: 'gitlab_com'
    export_table: 'vulnerability_occurrences'
    export_table_primary_key: 'id'
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , created_at
      , updated_at
      , severity
      , confidence
      , report_type
      , project_id
      , scanner_id
      , primary_identifier_id
      , uuid
      , name
      , metadata_version
      , raw_metadata
      , vulnerability_id
      FROM vulnerability_occurrences
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  web_hooks:
    export_schema: 'gitlab_com'
    export_table: web_hooks
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , created_at
      , updated_at
      , type
      , service_id
      FROM web_hooks
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
#   web_hook_logs:  # breaking extract 04-23-2020
#     export_schema: 'gitlab_com'
#     export_table: web_hook_logs
#     export_table_primary_key: id
#     import_db: GITLAB_DB
#     import_query: >
#       SELECT id
#       , web_hook_id
#       , trigger
#       , url
#       , request_headers
#       , request_data
#       , response_headers
#       , response_body
#       , response_status
#       , execution_duration
#       , internal_error_message
#       , created_at
#       , updated_at
#       FROM web_hook_logs
#       WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
#         AND '{EXECUTION_DATE}'::timestamp
  zoom_meetings:
    export_schema: "gitlab_com"
    export_table: zoom_meetings
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , issue_id
      , created_at
      , updated_at
      , issue_status
      , url
      FROM zoom_meetings
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
