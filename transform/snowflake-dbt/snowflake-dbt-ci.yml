.snowflake_dbt_jobs: &snowflake_dbt_jobs
  image: registry.gitlab.com/gitlab-data/data-image/dbt-image:v1.0.2
  stage: ‚öôÔ∏è dbt Run
  before_script:
    - cd transform/snowflake-dbt/
    - echo $BRANCH_NAME
    - if [ $BRANCH_NAME = "master" ]; then export SNOWFLAKE_PREP_DATABASE="PREP"; else export SNOWFLAKE_PREP_DATABASE="${CI_COMMIT_REF_NAME^^}_PREP"; fi
    - if [ $BRANCH_NAME = "master" ]; then export SNOWFLAKE_PROD_DATABASE="PROD"; else export SNOWFLAKE_PROD_DATABASE="${CI_COMMIT_REF_NAME^^}_PROD"; fi
    - echo $SNOWFLAKE_PREP_DATABASE
    - echo $SNOWFLAKE_PROD_DATABASE
    - export SNOWFLAKE_LOAD_DATABASE="RAW" # dbt pulls from RAW
    - echo $SNOWFLAKE_LOAD_DATABASE
    - export SNOWFLAKE_TRANSFORM_WAREHOUSE=$SNOWFLAKE_MR_XS_WAREHOUSE
    - echo $SNOWFLAKE_TRANSFORM_WAREHOUSE
    - export SNOWFLAKE_SNAPSHOT_DATABASE="SNOWFLAKE"
    - echo $SNOWFLAKE_SNAPSHOT_DATABASE
    - export CI_PROFILE_TARGET="--profiles-dir profile --target ci"
    - echo $CI_PROFILE_TARGET
    - mkdir -p ~/.ssh
    - touch ~/.ssh/id_rsa
    - chmod 700 ~/.ssh
    - echo "$GIT_DATA_TESTS_SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/id_rsa # decodes key from base64
    - chmod 0400 ~/.ssh/id_rsa # Makes key read only
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config # Adds gitlab.com as known host
  after_script:
    - cd $CI_PROJECT_DIR/transform/snowflake-dbt/
    - mkdir -p $CI_PROJECT_DIR/public/dbt/
    - cp -r target $CI_PROJECT_DIR/public/dbt/ 
  tags:
    - analytics
  only:
    - merge_requests
  when: manual
  artifacts:
    name: "dbt Compiled Files"
    paths:
      - public
    expire_in: 1 week
    when: always

# Common commands anchors
.clone_raw: &clone_raw
  - export SNOWFLAKE_LOAD_DATABASE="${CI_COMMIT_REF_NAME^^}_RAW"
  - echo $SNOWFLAKE_LOAD_DATABASE

.set_snapshot: &set_snapshot
  - export SNOWFLAKE_SNAPSHOT_DATABASE="${CI_COMMIT_REF_NAME^^}_RAW" # Must write to clone of RAW since this does real work
  - echo $SNOWFLAKE_SNAPSHOT_DATABASE 

.deps_and_seed: &deps_and_seed
  - python3 macro_name_check.py
  - dbt deps $CI_PROFILE_TARGET
  - dbt seed --full-refresh $CI_PROFILE_TARGET #seed data from csv
  - dbt --warn-error --partial-parse run-operation tag_validation --profiles-dir profile --target ci

.l_warehouse: &l_warehouse
  - export SNOWFLAKE_TRANSFORM_WAREHOUSE=$SNOWFLAKE_MR_L_WAREHOUSE
  - echo $SNOWFLAKE_TRANSFORM_WAREHOUSE

.xl_warehouse: &xl_warehouse
  - export SNOWFLAKE_TRANSFORM_WAREHOUSE=$SNOWFLAKE_MR_XL_WAREHOUSE
  - echo $SNOWFLAKE_TRANSFORM_WAREHOUSE

.xs_warehouse: &xs_warehouse
  - export SNOWFLAKE_TRANSFORM_WAREHOUSE=$SNOWFLAKE_MR_XS_WAREHOUSE
  - echo $SNOWFLAKE_TRANSFORM_WAREHOUSE

# MR Jobs
‚ûñüê≠specify_exclude:
  <<: *snowflake_dbt_jobs
  script:
    - *deps_and_seed
    - echo $DBT_MODELS
    - dbt --partial-parse run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --exclude $DBT_MODELS || FAILED=true
    - dbt --partial-parse test $CI_PROFILE_TARGET --exclude $DBT_MODELS || FAILED=true
    - dbt --partial-parse run $CI_PROFILE_TARGET --exclude $DBT_MODELS || FAILED=true
    - dbt --partial-parse test $CI_PROFILE_TARGET --exclude $DBT_MODELS || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

‚ûñü¶ñspecify_l_exclude:
  <<: *snowflake_dbt_jobs
  script:
    - *l_warehouse
    - *deps_and_seed
    - echo $DBT_MODELS
    - dbt --partial-parse run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --exclude $DBT_MODELS || FAILED=true
    - *xs_warehouse
    - dbt --partial-parse test $CI_PROFILE_TARGET --exclude $DBT_MODELS || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

‚ûñüêòspecify_xl_exclude:
  <<: *snowflake_dbt_jobs
  script:
    - *xl_warehouse
    - *deps_and_seed
    - echo $DBT_MODELS
    - dbt --partial-parse run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --exclude $DBT_MODELS || FAILED=true
    - *xs_warehouse
    - dbt --partial-parse test $CI_PROFILE_TARGET --exclude $DBT_MODELS || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

‚ûïüê≠specify_model:
  <<: *snowflake_dbt_jobs
  script:
    - *deps_and_seed
    - echo $DBT_MODELS
    - dbt --partial-parse run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --models $DBT_MODELS || FAILED=true
    - dbt --partial-parse test $CI_PROFILE_TARGET --models $DBT_MODELS || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

‚ûïü¶ñspecify_l_model:
  <<: *snowflake_dbt_jobs
  script:
    - *l_warehouse
    - *deps_and_seed
    - echo $DBT_MODELS
    - dbt --partial-parse run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --models $DBT_MODELS || FAILED=true
    - *xs_warehouse
    - dbt --partial-parse test $CI_PROFILE_TARGET --models $DBT_MODELS || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

‚ûïüêòspecify_xl_model:
  <<: *snowflake_dbt_jobs
  script:
    - *xl_warehouse
    - *deps_and_seed
    - echo $DBT_MODELS
    - dbt --partial-parse run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --models $DBT_MODELS || FAILED=true
    - *xs_warehouse
    - dbt --partial-parse test $CI_PROFILE_TARGET --models $DBT_MODELS || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

‚ûïüê≠ü•©specify_raw_model:
  <<: *snowflake_dbt_jobs
  script:
    - *deps_and_seed
    - *clone_raw # Reads from raw clone 
    - *set_snapshot
    - echo $DBT_MODELS
    - dbt run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --models $DBT_MODELS || FAILED=true
    - dbt --partial-parse test $CI_PROFILE_TARGET --models $DBT_MODELS || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

‚ûïüå±specify_csv_seed:
  <<: *snowflake_dbt_jobs
  script:
    - python3 macro_name_check.py
    - dbt deps $CI_PROFILE_TARGET
    - echo $DBT_MODELS
    - dbt seed --full-refresh $CI_PROFILE_TARGET --select $DBT_MODELS
    
‚ûïüì∏ü•©specify_snapshot:
  <<: *snowflake_dbt_jobs
  script:
    - echo $DBT_MODELS
    - *set_snapshot
    - *clone_raw # Reads from raw clone
    - *deps_and_seed
    - dbt snapshot $CI_PROFILE_TARGET --select $DBT_MODELS

‚ûïüì∏ü•©ü¶ñspecify_l_snapshot:
  <<: *snowflake_dbt_jobs
  script:
    - echo $DBT_MODELS
    - *set_snapshot
    - *clone_raw # Reads from raw clone
    - *l_warehouse
    - *deps_and_seed
    - dbt snapshot $CI_PROFILE_TARGET --select $DBT_MODELS

‚ûïüèóÔ∏èüõ∫run_changed_models_sql:
  <<: *snowflake_dbt_jobs
  script:
    - *deps_and_seed
    - CHANGED_FILES=$(git diff --name-only $CI_MERGE_REQUEST_DIFF_BASE_SHA...HEAD | xargs -n1 basename | grep '\.sql'  | sed "s/^/$ANCESTOR_TYPE/g" | sed "s/.sql/$DEPENDENT_TYPE/g" )
    - echo $CHANGED_FILES
    - dbt --partial-parse run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --models $CHANGED_FILES || FAILED=true
    - dbt --partial-parse test $CI_PROFILE_TARGET --models $CHANGED_FILES || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

‚ûïüèóÔ∏èüõ∫ü¶ñrun_changed_models_sql_l:
  <<: *snowflake_dbt_jobs
  script:
    - *l_warehouse
    - *deps_and_seed
    - CHANGED_FILES=$(git diff --name-only $CI_MERGE_REQUEST_DIFF_BASE_SHA...HEAD | xargs -n1 basename | grep '\.sql'  | sed "s/^/$ANCESTOR_TYPE/g" | sed "s/.sql/$DEPENDENT_TYPE/g" )
    - echo $CHANGED_FILES
    - dbt --partial-parse run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --models $CHANGED_FILES || FAILED=true
    - dbt --partial-parse test $CI_PROFILE_TARGET --models $CHANGED_FILES || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

‚ûïüèóÔ∏èüõ∫üêòrun_changed_models_sql_xl:
  <<: *snowflake_dbt_jobs
  script:
    - *xl_warehouse
    - *deps_and_seed
    - CHANGED_FILES=$(git diff --name-only $CI_MERGE_REQUEST_DIFF_BASE_SHA...HEAD | xargs -n1 basename | grep '\.sql'  | sed "s/^/$ANCESTOR_TYPE/g" | sed "s/.sql/$DEPENDENT_TYPE/g" )
    - echo $CHANGED_FILES
    - dbt --partial-parse run $CI_PROFILE_TARGET ${REFRESH:-"--full-refresh"} --models $CHANGED_FILES || FAILED=true
    - dbt --partial-parse test $CI_PROFILE_TARGET --models $CHANGED_FILES || FAILED=true
    - if [ $FAILED ]; then exit 1; fi

# dbt tests
.dbt_misc_jobs: &dbt_misc_jobs
  <<: *snowflake_dbt_jobs
  stage: üõ† dbt Misc

üß†all_tests:
  <<: *dbt_misc_jobs
  script:
    - *deps_and_seed
    - dbt --partial-parse test $CI_PROFILE_TARGET

üíædata_tests:
  <<: *dbt_misc_jobs
  script:
    - *deps_and_seed
    - dbt --partial-parse test --data $CI_PROFILE_TARGET

üåªfreshness:
  <<: *dbt_misc_jobs
  script:
    - *deps_and_seed
    - dbt --partial-parse source snapshot-freshness $CI_PROFILE_TARGET

üóÇschema_tests:
  <<: *dbt_misc_jobs
  script:
    - *deps_and_seed
    - dbt --partial-parse test --schema $CI_PROFILE_TARGET

üì∏snapshots:
  <<: *dbt_misc_jobs
  script:
    - export SNOWFLAKE_SNAPSHOT_DATABASE="${CI_COMMIT_REF_NAME^^}_RAW" # Must write to clone of RAW since this does real work
    - echo $SNOWFLAKE_SNAPSHOT_DATABASE
    - *deps_and_seed
    - dbt snapshot $CI_PROFILE_TARGET
    
üìùspecify_tests:
  <<: *dbt_misc_jobs
  script:
    - *deps_and_seed
    - echo $DBT_MODELS
    - dbt --partial-parse test $CI_PROFILE_TARGET --models $DBT_MODELS

# ======
# SAFE Models Check
# ======

.safe_models_check: &safe_models_check
  stage: üõ† dbt Misc
  image: registry.gitlab.com/gitlab-data/data-image/dbt-image:v1.0.2
  before_script:
    - cd transform/snowflake-dbt/
    - echo $BRANCH_NAME
    - if [ $BRANCH_NAME = "master" ]; then export SNOWFLAKE_PREP_DATABASE="PREP"; else export SNOWFLAKE_PREP_DATABASE="${CI_COMMIT_REF_NAME^^}_PREP"; fi
    - if [ $BRANCH_NAME = "master" ]; then export SNOWFLAKE_PROD_DATABASE="PROD"; else export SNOWFLAKE_PROD_DATABASE="${CI_COMMIT_REF_NAME^^}_PROD"; fi
    - echo $SNOWFLAKE_PREP_DATABASE
    - echo $SNOWFLAKE_PROD_DATABASE
    - export SNOWFLAKE_LOAD_DATABASE="RAW" # dbt pulls from RAW
    - echo $SNOWFLAKE_LOAD_DATABASE
    - export SNOWFLAKE_TRANSFORM_WAREHOUSE=$SNOWFLAKE_MR_XS_WAREHOUSE
    - echo $SNOWFLAKE_TRANSFORM_WAREHOUSE
    - export SNOWFLAKE_SNAPSHOT_DATABASE="SNOWFLAKE"
    - echo $SNOWFLAKE_SNAPSHOT_DATABASE
    - export CI_PROFILE_TARGET="--profiles-dir profile --target ci"
    - echo $CI_PROFILE_TARGET
    - mkdir -p ~/.ssh
    - touch ~/.ssh/id_rsa
    - chmod 700 ~/.ssh
    - echo "$GIT_DATA_TESTS_SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/id_rsa # decodes key from base64
    - chmod 0400 ~/.ssh/id_rsa # Makes key read only
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config # Adds gitlab.com as known host
  tags:
    - analytics
  only:
    changes:
      - "transform/snowflake-dbt/models/**/*.sql"
    refs:
      - merge_request
  allow_failure: false

üö´safe_model_script:
  <<: *safe_models_check
  script:
    - dbt deps $CI_PROFILE_TARGET
    - dbt --partial-parse --quiet ls $CI_PROFILE_TARGET --models tag:mnpi+
      --exclude
        tag:mnpi_exception
        config.database:$SNOWFLAKE_PREP_DATABASE
        config.schema:restricted_safe_common
        config.schema:restricted_safe_common_mapping
        config.schema:restricted_safe_common_mart_finance
        config.schema:restricted_safe_common_mart_sales
        config.schema:restricted_safe_common_mart_product
        config.schema:restricted_safe_common_prep
        config.schema:restricted_safe_legacy
        config.schema:restricted_safe_workspace_finance
        config.schema:restricted_safe_workspace_sales 
      --output json > safe_models.json
    - python3 safe_model_check.py

# ======
# Periscope Model Check
# ======

.periscope_check: &periscope_check
  stage: üõ† dbt Misc
  image: registry.gitlab.com/gitlab-data/data-image/data-image:v0.0.13
  tags:
    - analytics
  only:
    changes:
      - "**/*.sql"
    refs:
      - merge_request
  allow_failure: true

üîçperiscope_query:
  <<: *periscope_check
  script:
    - git clone -b periscope/master --single-branch https://gitlab-data-ci:$PERISCOPE_REPO_TOKEN@gitlab.com/gitlab-data/periscope.git --depth 1
    - git diff origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME...HEAD --name-only | grep -iEo "(.*)\.sql" | sed -E 's/\.sql//' | awk -F '/' '{print tolower($NF)}' | sort | uniq > diff.txt
    - touch comparison.txt
    - python3 transform/periscope_check.py
    - if (( $(cat comparison.txt | wc -l | tr -d ' ') > 0 )); then echo "Check these!" && cat comparison.txt && exit 1; else echo "All good" && exit 0; fi;


# ======
# Lint dbt SQL
# ======
.dbt_sql_lint: &dbt_sql_lint
  stage: üõ† dbt Misc
  image: registry.gitlab.com/gitlab-data/data-image/dbt-image:v1.0.2
  before_script:
    - cd transform/snowflake-dbt/
    - echo $BRANCH_NAME
    - if [ $BRANCH_NAME = "master" ]; then export SNOWFLAKE_PREP_DATABASE="PREP"; else export SNOWFLAKE_PREP_DATABASE="${CI_COMMIT_REF_NAME^^}_PREP"; fi
    - if [ $BRANCH_NAME = "master" ]; then export SNOWFLAKE_PROD_DATABASE="PROD"; else export SNOWFLAKE_PROD_DATABASE="${CI_COMMIT_REF_NAME^^}_PROD"; fi
    - echo $SNOWFLAKE_PREP_DATABASE
    - echo $SNOWFLAKE_PROD_DATABASE
    - export SNOWFLAKE_LOAD_DATABASE="RAW" # dbt pulls from RAW
    - echo $SNOWFLAKE_LOAD_DATABASE
    - export SNOWFLAKE_TRANSFORM_WAREHOUSE=$SNOWFLAKE_MR_XS_WAREHOUSE
    - echo $SNOWFLAKE_TRANSFORM_WAREHOUSE
    - export SNOWFLAKE_SNAPSHOT_DATABASE="SNOWFLAKE"
    - echo $SNOWFLAKE_SNAPSHOT_DATABASE
    - export CI_PROFILE_TARGET="--profiles-dir profile --target ci"
    - echo $CI_PROFILE_TARGET
    - mkdir -p ~/.ssh
    - touch ~/.ssh/id_rsa
    - chmod 700 ~/.ssh
    - echo "$GIT_DATA_TESTS_SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/id_rsa # decodes key from base64
    - chmod 0400 ~/.ssh/id_rsa # Makes key read only
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config # Adds gitlab.com as known host
  tags:
    - analytics
  when: manual
  only:
    changes:
      - "transform/snowflake-dbt/models/**/*.sql"
    refs:
      - merge_request
  allow_failure: true

üõÉdbt_sqlfluff:
  <<: *dbt_sql_lint
  script:
    - dbt deps $CI_PROFILE_TARGET
    - export LINT_LIST=$(git diff origin/master...HEAD --name-only -- '*.sql'  | awk -F 'transform/snowflake-dbt/' '{print tolower($NF)}' | sort | uniq )
    - echo $LINT_LIST
    - sqlfluff lint $LINT_LIST --config .sqlfluff-ci
