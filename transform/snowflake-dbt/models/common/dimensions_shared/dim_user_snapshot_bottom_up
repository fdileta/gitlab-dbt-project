{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "table",
    "unique_key": "dim_user_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('user_snapshots', 'gitlab_dotcom_users_snapshots'),
    ('email_classification', 'driveload_email_domain_classification_source'),
    ('identities_snapshots','gitlab_dotcom_identities_snapshots'),
    ('preferences_snapshots','gitlab_dotcom_user_preferences_snapshots'),
    ('details_snapshots','gitlab_dotcom_user_details_snapshots'),
    ('leads_snapshots','customers_db_leads_snapshots')

]) }}, 

WITH snapshot_dates AS (

    SELECT *
    FROM dim_date
    WHERE date_actual >= '2020-03-01' and date_actual <= CURRENT_DATE

), user_snapshots_spined AS (

    SELECT
        snapshot_dates.date_id AS snapshot_date_id,
        user_snapshots.*
    FROM user_snapshots
    INNER JOIN snapshot_dates
        ON snapshot_dates.date_actual >= user_snapshots.dbt_valid_from
        AND snapshot_dates.date_actual < {{ coalesce_to_infinity('user_snapshots.dbt_valid_to') }}

), email_classification AS (

    SELECT 
    *
    FROM email_classification
    QUALIFY ROW_NUMBER() OVER(PARTITION BY domain ORDER BY domain DESC) = 1

), closest_provider  ????????? AS (

    SELECT
        user_snapshots.user_id AS user_id,
        identity.identity_provider AS identity_provider
    FROM user_snapshots                                                       
    LEFT JOIN identity
    ON user_snapshots.user_id = identity.user_id
    WHERE 
        identity.user_id IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY user_snapshots.user_id 
        ORDER BY TIMEDIFF(MILLISECONDS,users_source.created_at,COALESCE(identity.created_at,{{var('infinity_future')}})) ASC) = 1

), preferences_snapshots_spined AS (

    SELECT 
        preferences_snapshots.user_id AS user_id,
        COALESCE(preferences_snapshots.setup_for_company::VARCHAR,'Unknown') AS setup_for_company
    FROM preferences_snapshots
    INNER JOIN snapshot_dates
        ON snapshot_dates.date_actual >= preferences_snapshots.dbt_valid_from
        AND snapshot_dates.date_actual < {{ coalesce_to_infinity('preferences_snapshots.dbt_valid_to') }}
        
), details_snapshots_spined AS (

    SELECT 
    details_snapshots.user_id AS user_id,
        CASE COALESCE(details_snapshots.registration_objective,-1)
            WHEN 0 THEN 'basics' 
            WHEN 1 THEN 'move_repository' 
            WHEN 2 THEN 'code_storage' 
            WHEN 3 THEN 'exploring' 
            WHEN 4 THEN 'ci' 
            WHEN 5 THEN 'other' 
            WHEN 6 THEN 'joining_team'
            WHEN -1 THEN 'Unknown'
        END AS jobs_to_be_done
    FROM details_snapshots
    INNER JOIN snapshot_dates
        ON snapshot_dates.date_actual >= details_snapshots.dbt_valid_from
        AND snapshot_dates.date_actual < {{ coalesce_to_infinity('details_snapshots.dbt_valid_to') }}

), leads_snapshots_spined  ???  AS (

    SELECT 
        leads_snapshots.user_id AS user_id,
        COALESCE(MAX(leads_snapshots.is_for_business_use)::VARCHAR,'Unknown') AS for_business_use,
        COALESCE(MAX(leads_snapshots.employees_bucket)::VARCHAR,'Unknown') AS employee_count,
        COALESCE(MAX(leads_snapshots.country)::VARCHAR,'Unknown') AS country,
        COALESCE(MAX(leads_snapshots.state)::VARCHAR,'Unknown') AS state
    FROM leads_snapshots 
    INNER JOIN snapshot_dates
        ON snapshot_dates.date_actual >= leads_snapshots.dbt_valid_from
        AND snapshot_dates.date_actual < {{ coalesce_to_infinity('leads_snapshots.dbt_valid_to') }}
    GROUP BY
        user_id

), 

renamed AS (

  SELECT
    
    
    --surrogate_key
   {{ dbt_utils.surrogate_key(['snapshot_id', 'dim_user_id']) }}   AS user_snapshot_id,
   
   {{ dbt_utils.surrogate_key(['source.user_id']) }}  AS dim_user_sk,
    
    --natural_key
    source.user_id,
    
    --legacy natural_key to be deprecated during change management plan
    source.user_id AS dim_user_id,
    
    --Other attributes
    source.remember_created_at AS remember_created_at,
    source.sign_in_count AS sign_in_count,
    source.current_sign_in_at AS current_sign_in_at,
    source.last_sign_in_at AS last_sign_in_at,
    source.created_at AS created_at,
    dim_date.date_id AS created_date_id,
    source.updated_at AS updated_at,
    source.is_admin AS is_admin,
    source.state AS user_state,
    CASE 
      WHEN source.state in ('blocked', 'banned') THEN TRUE
      ELSE FALSE 
    END AS is_blocked_user,
    source.notification_email_domain AS notification_email_domain,
    notification_email_domain.classification AS notification_email_domain_classification,
    source.email_domain AS email_domain,
    email_domain.classification AS email_domain_classification,
    source.public_email_domain AS public_email_domain,
    public_email_domain.classification AS public_email_domain_classification,
    source.commit_email_domain AS commit_email_domain,
    commit_email_domain.classification AS commit_email_domain_classification,
    closest_provider.identity_provider AS identity_provider,

    -- Expanded Attributes  (Not Found = Joined Row Not found for the Attribute)
    COALESCE(source.role,'Unknown') AS role,
    COALESCE(TO_DATE(source.last_activity_on)::VARCHAR,'Unknown') AS last_activity_date,              
    COALESCE(TO_DATE(source.last_sign_in_at)::VARCHAR,'Unknown')  AS last_sign_in_date,               
    COALESCE(user_preferences.setup_for_company,'Not Found') AS setup_for_company,               
    COALESCE(user_details.jobs_to_be_done,'Not Found') AS jobs_to_be_done,
    COALESCE(customer_leads.for_business_use,'Not Found') AS for_business_use,                 
    COALESCE(customer_leads.employee_count,'Not Found') AS employee_count,
    COALESCE(customer_leads.country,'Not Found') AS country,
    COALESCE(customer_leads.state,'Not Found') AS state

  FROM source
  LEFT JOIN dim_date
    ON TO_DATE(source.created_at) = dim_date.date_day
  LEFT JOIN email_classification_dedup AS notification_email_domain
    ON notification_email_domain.domain = source.notification_email_domain
  LEFT JOIN email_classification_dedup AS email_domain
    ON email_domain.domain = source.email_domain
  LEFT JOIN email_classification_dedup AS public_email_domain
    ON public_email_domain.domain = source.public_email_domain
  LEFT JOIN email_classification_dedup AS commit_email_domain
    ON commit_email_domain.domain = source.commit_email_domain
  LEFT JOIN closest_provider AS closest_provider
    ON source.user_id = closest_provider.user_id  
  LEFT JOIN user_preferences  AS user_preferences
    ON source.user_id = user_preferences.user_id
  LEFT JOIN user_details AS user_details
    ON source.user_id = user_details.user_id
  LEFT JOIN customer_leads AS customer_leads
    ON source.user_id = customer_leads.user_id

)

{{ dbt_audit(
    cte_ref="renamed",
    created_by="tpoole",
    updated_by="@tpoole",
    created_date="2022-11-09",
    updated_date="2022-11-09"
) }}

-- {{ config(
--     tags=["product"]
-- ) }}

-- {{ config({
--     "materialized": "table",
--     "unique_key": "dim_user_id"
--     })
-- }}

-- {{ simple_cte([
--     ('dim_date', 'dim_date'),
--     ('source', 'gitlab_dotcom_users_source'),
--     ('email_classification', 'driveload_email_domain_classification_source'),
--     ('identity','gitlab_dotcom_identities_source'),
--     ('gitlab_dotcom_user_preferences_source','gitlab_dotcom_user_preferences_source'),
--     ('gitlab_dotcom_user_details_source','gitlab_dotcom_user_details_source'),
--     ('customers_db_leads_source','customers_db_leads_source')

-- ]) }}, 

-- email_classification_dedup AS (

--   SELECT 
--     *
--   FROM email_classification
--   QUALIFY ROW_NUMBER() OVER(PARTITION BY domain ORDER BY domain DESC) = 1

-- ), 

-- closest_provider AS (

--   SELECT
--     source.user_id AS user_id,
--     identity.identity_provider AS identity_provider
--   FROM source                                                       
--   LEFT JOIN identity 
--     ON source.user_id = identity.user_id
--   WHERE 
--     identity.user_id IS NOT NULL
--   QUALIFY ROW_NUMBER() OVER(PARTITION BY source.user_id 
--       ORDER BY TIMEDIFF(MILLISECONDS,source.created_at,COALESCE(identity.created_at,{{var('infinity_future')}})) ASC) = 1

-- ), 

-- user_preferences AS (

--   SELECT 
--     user_id AS user_id,
--     COALESCE(setup_for_company::VARCHAR,'Unknown') AS setup_for_company
--   FROM gitlab_dotcom_user_preferences_source

-- ),

-- user_details AS (

--   SELECT 
--     user_id AS user_id,
--     CASE COALESCE(registration_objective,-1)
--       WHEN 0 THEN 'basics' 
--       WHEN 1 THEN 'move_repository' 
--       WHEN 2 THEN 'code_storage' 
--       WHEN 3 THEN 'exploring' 
--       WHEN 4 THEN 'ci' 
--       WHEN 5 THEN 'other' 
--       WHEN 6 THEN 'joining_team'
--       WHEN -1 THEN 'Unknown'
--     END AS jobs_to_be_done
--   FROM gitlab_dotcom_user_details_source

-- ),

-- customer_leads AS (

--   SELECT 
--     user_id AS user_id,
--     COALESCE(MAX(is_for_business_use)::VARCHAR,'Unknown') AS for_business_use,
--     COALESCE(MAX(employees_bucket)::VARCHAR,'Unknown') AS employee_count,
--     COALESCE(MAX(country)::VARCHAR,'Unknown') AS country,
--     COALESCE(MAX(state)::VARCHAR,'Unknown') AS state
--   FROM customers_db_leads_source
--   GROUP BY
--     user_id

-- ),


-- renamed AS (

--   SELECT
--     --surrogate_key
--     {{ dbt_utils.surrogate_key(['source.user_id']) }}  AS dim_user_sk,
    
--     --natural_key
--     source.user_id,
    
--     --legacy natural_key to be deprecated during change management plan
--     source.user_id AS dim_user_id,
    
--     --Other attributes
--     source.remember_created_at AS remember_created_at,
--     source.sign_in_count AS sign_in_count,
--     source.current_sign_in_at AS current_sign_in_at,
--     source.last_sign_in_at AS last_sign_in_at,
--     source.created_at AS created_at,
--     dim_date.date_id AS created_date_id,
--     source.updated_at AS updated_at,
--     source.is_admin AS is_admin,
--     source.state AS user_state,
--     CASE 
--       WHEN source.state in ('blocked', 'banned') THEN TRUE
--       ELSE FALSE 
--     END AS is_blocked_user,
--     source.notification_email_domain AS notification_email_domain,
--     notification_email_domain.classification AS notification_email_domain_classification,
--     source.email_domain AS email_domain,
--     email_domain.classification AS email_domain_classification,
--     source.public_email_domain AS public_email_domain,
--     public_email_domain.classification AS public_email_domain_classification,
--     source.commit_email_domain AS commit_email_domain,
--     commit_email_domain.classification AS commit_email_domain_classification,
--     closest_provider.identity_provider AS identity_provider,

--     -- Expanded Attributes  (Not Found = Joined Row Not found for the Attribute)
--     COALESCE(source.role,'Unknown') AS role,
--     COALESCE(TO_DATE(source.last_activity_on)::VARCHAR,'Unknown') AS last_activity_date,              
--     COALESCE(TO_DATE(source.last_sign_in_at)::VARCHAR,'Unknown')  AS last_sign_in_date,               
--     COALESCE(user_preferences.setup_for_company,'Not Found') AS setup_for_company,               
--     COALESCE(user_details.jobs_to_be_done,'Not Found') AS jobs_to_be_done,
--     COALESCE(customer_leads.for_business_use,'Not Found') AS for_business_use,                 
--     COALESCE(customer_leads.employee_count,'Not Found') AS employee_count,
--     COALESCE(customer_leads.country,'Not Found') AS country,
--     COALESCE(customer_leads.state,'Not Found') AS state

--   FROM source
--   LEFT JOIN dim_date
--     ON TO_DATE(source.created_at) = dim_date.date_day
--   LEFT JOIN email_classification_dedup AS notification_email_domain
--     ON notification_email_domain.domain = source.notification_email_domain
--   LEFT JOIN email_classification_dedup AS email_domain
--     ON email_domain.domain = source.email_domain
--   LEFT JOIN email_classification_dedup AS public_email_domain
--     ON public_email_domain.domain = source.public_email_domain
--   LEFT JOIN email_classification_dedup AS commit_email_domain
--     ON commit_email_domain.domain = source.commit_email_domain
--   LEFT JOIN closest_provider AS closest_provider
--     ON source.user_id = closest_provider.user_id  
--   LEFT JOIN user_preferences  AS user_preferences
--     ON source.user_id = user_preferences.user_id
--   LEFT JOIN user_details AS user_details
--     ON source.user_id = user_details.user_id
--   LEFT JOIN customer_leads AS customer_leads
--     ON source.user_id = customer_leads.user_id

-- )

-- {{ dbt_audit(
--     cte_ref="renamed",
--     created_by="@mpeychet",
--     updated_by="@tpoole",
--     created_date="2021-05-31",
--     updated_date="2022-08-25"
-- ) }}


-- ), zuora_account AS (

--     SELECT *
--     FROM {{ ref('zuora_account_snapshots_source') }}
--     WHERE is_deleted = FALSE
--       AND LOWER(live_batch) != 'batch20'

-- ), zuora_account_spined AS (

--     SELECT
--       snapshot_dates.date_id AS snapshot_id,
--       zuora_account.*
--     FROM zuora_account
--     INNER JOIN snapshot_dates
--       ON snapshot_dates.date_actual >= zuora_account.dbt_valid_from
--       AND snapshot_dates.date_actual < {{ coalesce_to_infinity('zuora_account.dbt_valid_to') }}

-- ), zuora_subscription AS (

--     SELECT *
--     FROM {{ ref('zuora_subscription_snapshots_source') }}
--     WHERE LOWER(subscription_status) NOT IN ('draft', 'expired')
--       AND is_deleted = FALSE
--       AND exclude_from_analysis IN ('False', '')

-- ), zuora_subscription_spined AS (

--     SELECT
--       snapshot_dates.date_id AS snapshot_id,
--       zuora_subscription.*
--     FROM zuora_subscription
--     INNER JOIN snapshot_dates
--       ON snapshot_dates.date_actual >= zuora_subscription.dbt_valid_from
--       AND snapshot_dates.date_actual < {{ coalesce_to_infinity('zuora_subscription.dbt_valid_to') }}
--     QUALIFY rank() OVER (
--          PARTITION BY subscription_name, snapshot_dates.date_actual
--          ORDER BY DBT_VALID_FROM DESC) = 1

-- ), map_merged_crm_account AS (

--     SELECT *
--     FROM {{ ref('map_merged_crm_account') }}

-- ), prep_amendment AS (

--   SELECT *
--   FROM {{ ref('prep_amendment') }}

-- ), subscription_lineage AS (

--     SELECT DISTINCT
--       subscription_name_slugify,
--       subscription_lineage,
--       oldest_subscription_in_cohort,
--       subscription_cohort_month,
--       subscription_cohort_quarter,
--       subscription_cohort_year
--     FROM {{ ref('map_subscription_lineage') }}

-- ), joined AS (

--     SELECT
--     --Surrogate Key
--       zuora_subscription_spined.snapshot_id                                     AS snapshot_id,
--       zuora_subscription_spined.subscription_id                                 AS dim_subscription_id,

--     --Natural Key
--       zuora_subscription_spined.subscription_name                               AS subscription_name,
--       zuora_subscription_spined.version                                         AS subscription_version,

--     --Common Dimension Keys
--       map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
--       zuora_account_spined.account_id                                           AS dim_billing_account_id,
--       zuora_subscription_spined.invoice_owner_id                                AS dim_billing_account_id_invoice_owner_account,
--       zuora_subscription_spined.creator_account_id                              AS dim_billing_account_id_creator_account,
--       zuora_subscription_spined.sfdc_opportunity_id                             AS dim_crm_opportunity_id,
--       {{ get_keyed_nulls('prep_amendment.dim_amendment_id') }}                  AS dim_amendment_id_subscription,

--     --Subscription Information
--       zuora_subscription_spined.created_by_id,
--       zuora_subscription_spined.updated_by_id,
--       zuora_subscription_spined.original_id                                     AS dim_subscription_id_original,
--       zuora_subscription_spined.previous_subscription_id                        AS dim_subscription_id_previous,
--       zuora_subscription_spined.subscription_name_slugify,
--       zuora_subscription_spined.subscription_status,
--       zuora_subscription_spined.auto_renew_native_hist,
--       zuora_subscription_spined.auto_renew_customerdot_hist,
--       zuora_subscription_spined.zuora_renewal_subscription_name,
--       zuora_subscription_spined.zuora_renewal_subscription_name_slugify,
--       zuora_subscription_spined.current_term,
--       zuora_subscription_spined.renewal_term,
--       zuora_subscription_spined.renewal_term_period_type,
--       zuora_subscription_spined.eoa_starter_bronze_offer_accepted,
--       IFF(zuora_subscription_spined.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
--           'Self-Service', 'Sales-Assisted')                                     AS subscription_sales_type,
--       invoice_owner.account_name                                                AS invoice_owner_account,
--       creator_account.account_name                                              AS creator_account,
--       IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
--                                                                                 AS was_purchased_through_reseller,
--       zuora_subscription_spined.multi_year_deal_subscription_linkage            AS multi_year_deal_subscription_linkage,

--     --Date Information
--       zuora_subscription_spined.subscription_start_date                         AS subscription_start_date,
--       zuora_subscription_spined.subscription_end_date                           AS subscription_end_date,
--       DATE_TRUNC('month', zuora_subscription_spined.subscription_start_date)    AS subscription_start_month,
--       DATE_TRUNC('month', zuora_subscription_spined.subscription_end_date)      AS subscription_end_month,
--       snapshot_dates.fiscal_year                                                AS subscription_end_fiscal_year,
--       zuora_subscription_spined.created_date::DATE                              AS subscription_created_date,
--       zuora_subscription_spined.updated_date::DATE                              AS subscription_updated_date,
--       zuora_subscription_spined.term_start_date::DATE                           AS term_start_date,
--       zuora_subscription_spined.term_end_date::DATE                             AS term_end_date,
--       DATE_TRUNC('month', zuora_subscription_spined.term_start_date::DATE)      AS term_start_month,
--       DATE_TRUNC('month', zuora_subscription_spined.term_end_date::DATE)        AS term_end_month,
--       CASE
--         WHEN LOWER(zuora_subscription_spined.subscription_status) = 'active' AND zuora_subscription_spined.subscription_end_date > CURRENT_DATE
--           THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription_spined.current_term, zuora_subscription_spined.subscription_end_date::DATE))
--         ELSE NULL
--       END                                                                       AS second_active_renewal_month,

--       --Lineage and Cohort Information
--       subscription_lineage.subscription_lineage,
--       subscription_lineage.oldest_subscription_in_cohort,
--       subscription_lineage.subscription_cohort_month,
--       subscription_lineage.subscription_cohort_quarter,
--       subscription_lineage.subscription_cohort_year,

--       --Supersonics Fields
--       zuora_subscription_spined.turn_on_cloud_licensing,
--       zuora_subscription_spined.turn_on_operational_metrics,
--       zuora_subscription_spined.contract_operational_metrics,
--       zuora_subscription_spined.contract_auto_renewal,
--       zuora_subscription_spined.turn_on_auto_renewal,
--       zuora_subscription_spined.contract_seat_reconciliation,
--       zuora_subscription_spined.turn_on_seat_reconciliation
--     FROM zuora_subscription_spined
--     INNER JOIN zuora_account_spined
--       ON zuora_subscription_spined.account_id = zuora_account_spined.account_id
--       AND zuora_subscription_spined.snapshot_id = zuora_account_spined.snapshot_id
--     LEFT JOIN zuora_account_spined AS invoice_owner
--       ON zuora_subscription_spined.invoice_owner_id = invoice_owner.account_id
--       AND zuora_subscription_spined.snapshot_id = invoice_owner.snapshot_id
--     LEFT JOIN zuora_account_spined AS creator_account
--       ON zuora_subscription_spined.creator_account_id = creator_account.account_id
--       AND zuora_subscription_spined.snapshot_id = creator_account.snapshot_id
--     LEFT JOIN map_merged_crm_account
--       ON zuora_account_spined.crm_id = map_merged_crm_account.sfdc_account_id
--     LEFT JOIN prep_amendment
--       ON zuora_subscription_spined.amendment_id = prep_amendment.dim_amendment_id
--     LEFT JOIN subscription_lineage
--       ON subscription_lineage.subscription_name_slugify = zuora_subscription_spined.subscription_name_slugify
--     LEFT JOIN snapshot_dates
--       ON zuora_subscription_spined.subscription_end_date::DATE = snapshot_dates.date_day

-- ), final AS (

--     SELECT
--         {{ dbt_utils.surrogate_key(['snapshot_id', 'dim_subscription_id']) }}   AS subscription_snapshot_id,
--         joined.*
--     FROM joined

-- )

-- {{ dbt_audit(
--     cte_ref="final",
--     created_by="@iweeks",
--     updated_by="@jpeguero",
--     created_date="2021-06-28",
--     updated_date="2022-07-12"
-- ) }}
